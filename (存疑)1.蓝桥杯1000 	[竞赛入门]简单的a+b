题目 1000：[竞赛入门]简单的 a+b
时间限制: 3s 内存限制: 192MB 提交: 235449 解决: 118034

问题描述:
输入两个整数a和b，计算a+b的和
本题很简单，但是注意这个题是多组测试数据，即需要不间断的接收系统的测试输入，你都可以计算结果并输出

输入格式:
输入两个整数A和B
范围不超过2^10

输出格式:
求A+B

样例输入:
1 1
10 20

样例输出:
2
30



我的代码:

#include<stdio.h>
int main()
{
    int a,b;
    while(~scanf("%d%d", &a, &b))printf("%d\n",a+b);
    return 0;
}

笔记:
1.关于"~"符号:
      "~"是一种单目运算符,即对一个数的二进制按位取反.如a=1010,则~a=0101.
      关于~的作用解析：
            (1)、在Windows下，用户按下CTRL+Z（会看到一个^Z字符），会停止输入流，scanf会返回-1。
            (2)、-1的补码为11111111 11111111 11111111 11111111  一共4个字节。
            (3)、~是C语言中的按位取反，因此~（-1）结果为00000000 00000000 00000000 00000000刚好为整数0的补码。
            (4)、因此当输入Ctrl+Z时，scanf会返回-1，while(~-1)==while(0)，0为假，退出while循环。
2.关于scanf的返回值:
  (1)返回正整数,表示正确输入参数的个数
      如果用户输入"3 4"，可以正确输入，返回2（正确输入了两个变量）；
      如果用户输入"3,4"，可以正确输入a，无法输入b，返回1（正确输入了一个变量）。 
  (2)返回0 
      表示用户的输入不匹配，无法正确输入任何值。如上例，用户如果输入",3 4"，返回0。
  (3)返回EOF
      这是在stdio.h里面定义的常量（通常值为-1），表示输入流已经结束。在Windows下，用户按下CTRL+Z（会看到一个^Z字符）再按下回车（可能需要重复2次），就表示输入结束；Linux/Unix下使用CTRL+D表示输入结束。
      所以可以使用下面的代码来处理输入：
          while (scanf("%s %c %c", str, &oldchar, &newchar) == 3) /* 或!= EOF , 但前者更好 */
          {
              ; //处理
          }
      此处不懂,故标记来源:
      https://blog.csdn.net/num24/article/details/41409159?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170833610416800213050963%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=
      170833610416800213050963&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-41409159-null-null.nonecase&utm_term=%E8%BF%94%E5%9B%9E%E5%80%BC&spm=1018.2226.3001.4450
3.运算符及优先级:https://blog.csdn.net/qq_65428993/article/details/128487837?ops_request_misc=&request_id=&biz_id=102&utm_term=c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6
                %E5%8F%B7&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-128487837.142^v99^pc_search_result_base3&spm=1018.2226.3001.4187
  看最后面的表格会舒服些,表格的原图"补充笔记1"进行了单独记录.
  另外,关于括号,更详细的之后补充在下面:


